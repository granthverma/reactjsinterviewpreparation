*{
    margin:0;
    padding: 0;
    box-sizing: border-box;
}

html,body {
    width: 100%;
    height: 100%;
}


/* h1{
    color: #d35d0f;
}

.line {
    color: blue;
}

#line2{
    color: blueviolet;
} */


/* #main {
    width: 100px;
    height: 100px;
    /* margin: 30px 10px; */
    /* padding: 10px;
    background-color: rgb(130, 243, 10);
} */ 


/* #main {
    width: 100%;
    height: 100%;
    background-image: url(https://images.unsplash.com/photo-1593696954577-ab3d39317b97?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=733&q=80);
    background-size: cover;
    background-position:center ;
 

} */
/* 
main {
    width: 100%;
    height: 100%;
} */

/* #car1 {
    position: absolute;
    width: 100px;
    height: 120px;
    background-color:red;
}

#car2 {
    position: absolute;
    top :50%;
    left:50%;
    width: 70px;
    height: 80px;
    background-color:rgb(21, 0, 255);
}

#car3{
 
    width: 150px;
    height: 120px;
    background-color:black;
} */

/* #box{
    position: relative;
    width: 300px;
    height: 200px;
    background-color: blue;
}

#littlebox {
    position: absolute;
    top: 10%;
    left: 30%;
    width: 100px;
    height: 100px;
    background-image: url(https://images.unsplash.com/photo-1628076674561-6e9a0b56f2c3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTh8fGZyZWUlMjBpbWFnZXN8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=1400&q=60);
} */


#box {
    display: flex;
    justify-content: space-around; 
    align-items: center;
    width:500px;
    height: 500px;
    background-color: gray;
}



 #box1{
    justify-content: space-between; 
        width: 100px;
        height: 100px;
        background-color: blue;
    }

    #box2{
        align-items:end;
        width: 100px;
        height: 110px;
        background-color: rgb(205, 205, 215);
    }

    #box3{

        width: 100px;
        height: 100px;
        background-color: red;

    }

/* 

  justify-content are main  axis
  l to r
    
flex-start: Items align to the left side of the container.
flex-end: Items align to the right side of the container.
center: Items align at the center of the container.
space-between: Items display with equal spacing between them.
space-around: Items display with equal spacing around them.

Use justify-content again to help these frogs get to their lilypads. Remember that this CSS property 
aligns items horizontally and accepts the following values:


Now use align-items to help the frogs get to the bottom of the pond. This CSS property aligns items vertically and accepts the following values:

flex-start: Items align to the top of the container.
flex-end: Items align to the bottom of the container.
center: Items align at the vertical center of the container.
baseline: Items display at the baseline of the container.
stretch: Items are stretched to fit the container.

The frogs need to get in the same order as their lilypads using flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:

row: Items are placed the same as the text direction.
row-reverse: Items are placed opposite to the text direction.
column: Items are placed top to bottom.
column-reverse: Items are placed bottom to top



Another property you can apply to individual items is align-self.

This property accepts the same values as align-items and its value
 for the specific item.


 Another property you can apply to individual items is align-self.
  This property accepts
  the same values as align-items and its value for the specific item.


  Oh no! The frogs are all squeezed onto a single row of lilypads. Spread them out using the flex-wrap property, which accepts the following values:

nowrap: Every item is fit to a single line.
wrap: Items wrap around to additional lines.
wrap-reverse: Items wrap around to additional lines in reverse.

flex-start: Lines are packed at the top of the container.
flex-end: Lines are packed at the bottom of the container.
center: Lines are packed at the vertical center of the container.
space-between: Lines display with equal spacing between them.
space-around: Lines display with equal spacing around them.
stretch: Lines are stretched to fit the container.
This can be confusing, but align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.
 */